se nocp

cal plug#begin()
Plug 'dense-analysis/ale'
Plug 'ayu-theme/ayu-vim'
"Plug 'python/black', {'for': ['python']}
"Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'Raimondi/delimitMate'
Plug 'mattn/emmet-vim', {'for': ['html', 'css']}
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/goyo.vim', {'for': ['markdown', 'text']}
"Plug 'davidhalter/jedi-vim'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree', {'on': ['NERDTreeToggle', 'NERDTreeFind']}
Plug 'unblevable/quick-scope'
Plug 'luochen1990/rainbow'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'ervandew/supertab'
Plug 'majutsushi/tagbar'
Plug 'wellle/targets.vim'
Plug 'tpope/vim-abolish'
Plug 'alvan/vim-closetag', {'for': ['html, xhtml', 'phtml', 'xml']}
Plug 'kkoomen/vim-doge', {'for': ['python']}
Plug 'junegunn/vim-easy-align'
"Plug 'nvie/vim-flake8', {'for': 'python'}
Plug 'tpope/vim-fugitive'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries', 'for': 'go'}
Plug 'xolox/vim-misc'
"Plug 'flebel/vim-mypy', { 'for': 'python', 'branch': 'bugfix/fast_parser_is_default_and_only_parser' }
Plug 'xolox/vim-notes'
Plug 'tpope/vim-repeat'
Plug 'jremmen/vim-ripgrep'
Plug 'xolox/vim-session'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
"Plug 'jmcantrell/vim-virtualenv', {'for': ['python']}
Plug 'lervag/vimtex', {'for': ['tex']}

cal plug#end()

pa! matchit

if !exists("g:os")
    if has("win64") || has("win32") || has("win16")
        let g:os = "Windows"
    else
        let g:os = substitute(system('uname'), '\n', '', '')
    endif
endif

function! s:ResizeNewWindow()
    let l:max_line_length = max(map(range(1, line('$')), "virtcol([v:val, '$'])"))
    let l:pref_min_line_length = 80
    let l:offset = 10
    "echom (s:max_line_length < s:pref_min_line_length ? s:pref_min_line_length : s:max_line_length)
    "echom  max(map(range(1, line('$')), "virtcol([v:val, '$'])"))
    "let &co=getline(1,'$')->map({ idx, val -> strchars(val) })->max()
    let &co = (s:max_line_length < s:pref_min_line_length ?  s:pref_min_line_length : (s:max_line_length + s:offset))
endfun

"TODO: Fix this
function! s:PlugSort()
    let start = search('\v\C^%(^\s*"?\s*Plug)@!.*\n\zs', 'bcWn')
    "echom(l:start)
    "cursor(l:start, 1)
    let end = search('\v\C.\ze\n%(^\s*"?\s*Plug)@!', 'cW')
    "echom(l:end)
    exec start.','.end.'sort /^\s*"\?\s*Plug\s\+''[^\/]\+\// i'
    "echon 'plugins sorted'
endfunction

se cursorline
se path+=**
se hlsearch
se wrap
se enc=utf-8
se termguicolors
let ayucolor="dark"
"se guifont=Anonymice\ Pro\ 20
se guifont=Anonymice_Powerline:h11:cANSI:qDRAFT
"colo industry
let mapleader="\<Space>"
"set list listchars=tab:\uBB,trail:\uB7,nbsp:~

"if has('gui_running')
    "set list listchars=tab:▶‒,nbsp:∙,trail:∙,extends:▶,precedes:◀
    "let &showbreak = '↳'
"else
    "set list listchars=tab:>-,nbsp:.,trail:.,extends:>,precedes:<
    "let &showbreak = '^'
"endif

se ul=1000
se ai
se complete+=kspell
se si
se ar
se linebreak
se history=9999
se formatoptions+=r
se wrap
se bs=indent,eol,start
se ts=4
se sts=4
se sw=4
se ttimeoutlen=10
"se ttimeout
se et
se fdl=99
se fdm=indent
"se gfn=Fira\ Mono\ for\ Powerline:h12
se hid
se ic
se scs
se is
se ls=2
se synmaxcol=300
se ttyfast
se lazyredraw
noh
se nowrap
se nu
se rnu
se so=5
se shm+=Ia
se sc
se sm
se sr
se ruler
se bk
se udf
se ut=750
se wmnu
se bri

if !isdirectory(expand("~/.vim/tmp")) | cal mkdir(expand("~/.vim/tmp"), "p") | en
se dir=~/.vim/tmp//,.
se bdir=~/.vim/tmp//,.
se udir=~/.vim/tmp//,.
se undofile

"hush
se noeb novb t_vb=

se go-=m
se go-=T
se go-=r
se go-=L
se go+=c

se viminfo=!,h,'500
se viminfo+=<10000
se viminfo+=s1000
se viminfo+=/1000
se viminfo+=:1000

syn enable


if g:os =~ "Windows"
    nn <f12> :sil !ctags -R --python-kinds=-i %<cr>
elseif g:os =~ "Linux"
    nn <f12> :sil! !ctags -R --python-kinds=-i %<cr>
endif

function! s:ToggleDisplayLineMappings()
    if &wrap ==? 'nowrap'
        unmap <silent> k
        unmap <silent> j
        unmap <silent> 0
        unmap <silent> ^
        unmap <silent> $
    else
        no <silent> k gk
        no <silent> j gj
        no <silent> 0 g0
        no <silent> ^ g^
        no <silent> $ g$
    endif
endfun

function! s:FixAyuColorScheme()
    if g:ayucolor==?'dark'
        highlight LineNr guifg=#808080
        highlight Normal guibg=#000000
        highlight Comment guibg=#000000
    endif
endfun

aug all
    au!
    au BufWritePost $MYVIMRC nested so $MYVIMRC | cal s:PlugSort()

    if g:os =~ "win"
        au BufWritePost *.py sil !ctags -R --python-kinds=-i
        au FileType python nn <buffer> <F5> :!start cmd /c python % & pause<cr>
    elseif g:os =~ "linux"
        au BufWritePost *.py sil !ctags -R --python-kinds=-i
    endif

    au FileType html,css EmmetInstall
    au FileType nerdtree setl rnu
    au FileType python nn <F6> :cal <SID>ToggleBreakpoint()<CR>
    "au GuiEnter * sim ~x "Maximized GVIM Window
    au QuickFixCmdPost * cw
    "au OptionSet nowrap cal DisableDisplayLineMappings()
    au OptionSet wrap cal s:ToggleDisplayLineMappings()
    "au VimEnter * call s:ResizeNewWindow()
    "au BufEnter * call s:ResizeNewWindow()
aug END

aug CustomAyuColorScheme
    au!
    au ColorScheme ayu call s:FixAyuColorScheme()
aug END
colorscheme ayu


"function! AleDogePatch()
    "ALEDisable
    "call doge#generate()
    "ALEEnable
"endfun

no <Leader>a ggVG
nn <leader>ll :ALEToggle<CR>
"no <Leader>d call AleDogePatch()

nn <Leader>b :ls<CR>:b<Space>
sil! nm <F3> :NERDTreeFind<CR>
sil! nm <F4> :NERDTreeToggle<CR>
sil! nm <F8> :TagbarToggle<CR>

com! -nargs=* -complete=help H helpg <args>

ino <C-BS> <C-W>
cno <C-BS> <C-W>

xn < <gv
xn > >gv

nn <leader>n :Note<CR>
nn <silent> <Leader>e :e $MYVIMRC<CR>
nn <leader>w :w!<cr>
nn <leader>v :vs<CR><C-L><C-F>:se scb<CR><C-H>:se scb<CR>

nn <leader>cp :let @*='"' . expand("%:p") . '"'<CR>
nn <leader>cd :let @*='"' . expand("%:p:h") . '"'<CR>
nn <leader>oe :sil! !start <C-R>='"' . expand("%:p:h") . '"'<CR><CR>
nn <Leader>owe :!start Explorer /select,%:p<cr>
nn <Leader>ocp :!start cmd /k cd %:p:h<cr>
nn <silent> <CR> :nohlsearch<CR><CR>
nn <C-P> :FZF<CR>

nn <Leader>qo :cope<CR>
nn <Leader>qc :ccl<CR>
nn <Leader>lo :lop<CR>
nn <Leader>lc :lcl<CR>

nn <leader>ga :Git add %:p<CR><CR>
nn <leader>gs :Gstatus<CR>
nn <leader>gc :Gcommit -v -q<CR>
nn <leader>gt :Gcommit -v -q :%p<CR>
nn <leader>gd :Gdiff<CR>
nn <leader>ge :Gedit<CR>
nn <leader>gr :Gread<CR>
nn <leader>gw :Gwrite<CR><CR>
nn <leader>gl :sil! Glog<CR>:bot copen<CR>
nn <leader>gp :Ggrep<Space>
nn <leader>gm :Gmove<Space>
nn <leader>gb :Git branch<Space>
nn <leader>go :Git checkout<Space>
nn <leader>gps :Gpush<CR>
nn <leader>gpl :Gpull<CR>

nn <C-J> <C-W><C-J>
nn <C-K> <C-W><C-K>
nn <C-L> <C-W><C-L>
nn <C-H> <C-W><C-H>

nn <Left> <C-W><
nn <Right> <C-W>>
nn <Up> <C-W>+
nn <Down> <C-W>-

"No Ex mode ugh
nn Q <nop>


if isdirectory("C:/Users/User/Dropbox/VimNotes")
    let g:notes_directories = ["C:/Users/User/Dropbox/VimNotes"]
endif
"let g:notes_suffix = '.txt'
let g:doge_doc_standard_python = 'numpy'
let g:session_autosave='yes'

let g:NERDTreeIgnore=['\.swp$', '\.un\~$', '\.pyc$', 'tags', '\.ropeproject[[dir]]', '__pycache__[[dir]]']
let g:NERDDefaultAlign = 'left'

let g:virtualenv_auto_activate=1

let g:user_emmet_install_global=0
let g:user_emmet_leader_key="<C-M>"

let g:tagbar_autofocus=1
let g:tagbar_compact=1
let g:tagbar_show_linenumbers=2
let g:tagbar_iconchars=['▶', '▼']
let g:tagbar_silent=1
let g:tagbar_sort=0
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

let g:rainbow_active=1

let g:session_autoload='no'

let g:ale_linters = {'python': ['flake8', 'mypy']}
let g:ale_fixers = {'*': ['remove_trailing_lines', 'trim_whitespace'], 'python': ['black', 'isort', 'add_blank_lines_for_python_control_statements']}
let g:ale_fix_on_save = 1
let g:ale_open_list = 1
nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

func! s:SetBreakpoint()
    cal append('.', repeat(' ', strlen(matchstr(getline('.'), '^\s*'))) . 'import ipdb; ipdb.set_trace()')
endf

func! s:RemoveBreakpoint()
    exe 'sil! g/^\s*import\sipdb\;\?\n*\s*ipdb.set_trace()/d'
endf

func! s:ToggleBreakpoint()
    if getline('.')=~#'^\s*import\sipdb' | cal s:RemoveBreakpoint() | el | cal s:SetBreakpoint() | en
endf

cmap w!! %!sudo tee > /dev/null %

let g:tex_flavor = 'latex'

let g:flake8_quickfix_location="topleft"
let g:flake8_show_in_gutter=1

function! s:Hardcopy()
  let colors_save = g:colors_name
  colorscheme default
  TOhtml
  execute 'colorscheme' colors_save
endfun
command! Hardcopy call s:Hardcopy()
